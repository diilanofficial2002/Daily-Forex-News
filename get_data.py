# get_data.py
import os
import time
import pandas as pd
import pandas_ta as ta
from iqoptionapi.stable_api import IQ_Option
from dotenv import load_dotenv

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å .env
load_dotenv()

class IQDataFetcher:
    """
    ‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ IQ Option, ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤ ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Indicators
    """
    def __init__(self):
        """
        Constructor: ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• login ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API
        """
        print("ü§ñ Initializing IQ Option Data Fetcher...")
        self.user = os.getenv("IQ_USER")
        self.password = os.getenv("IQ_PASS")
        self.api = None
        self.connect()

    def connect(self):
        """
        ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö IQ Option API ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Practice
        """
        if not self.user or not self.password:
            print("‚ùå IQ_USER or IQ_PASS not found in .env file. Cannot connect.")
            return

        print(f"üîó Connecting to IQ Option as {self.user}...")
        self.api = IQ_Option(self.user, self.password)
        check, reason = self.api.connect()

        if check:
            print("‚úÖ Connection successful!")
            # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î (Practice Account)
            # ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô "REAL"
            self.api.change_balance("PRACTICE") 
            print("üí∞ Switched to PRACTICE account.")
        else:
            print(f"‚ùå Connection failed. Reason: {reason}")
            self.api = None

    def _fetch_candles(self, pair, timeframe, count):
        """
        ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô (Candles)
        """
        if not self.api:
            return None
            
        print(f"üïØÔ∏è  Fetching {count} candles for {pair} on {timeframe}s timeframe...")
        self.api.start_candles_stream(pair, timeframe, count)
        time.sleep(3) # ‡∏£‡∏≠‡πÉ‡∏´‡πâ API ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à
        candles = self.api.get_realtime_candles(pair, timeframe)
        self.api.stop_candles_stream(pair, timeframe)
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô List of Dictionaries ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
        candle_list = []
        for timestamp in candles:
            candle_data = candles[timestamp]
            # ‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠ Key
            if 'open' in candle_data and candle_data.get('open') is not None:
                standardized_candle = {
                    'open': candle_data.get('open'),
                    'high': candle_data.get('max'),
                    'low': candle_data.get('min'),
                    'close': candle_data.get('close'),
                    'volume': candle_data.get('volume')
                }
                candle_list.append(standardized_candle)
        
        print(f"üìä Found {len(candle_list)} candles.")
        return candle_list
    def _calculate_indicators(self, candles):
        """
        ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Indicators ‡∏î‡πâ‡∏ß‡∏¢ Pandas
        """
        if not candles or len(candles) < 50: # ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 50 ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EMA50
            print("‚ö†Ô∏è Not enough data to calculate indicators.")
            return None

        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô DataFrame ‡∏Ç‡∏≠‡∏á Pandas
        df = pd.DataFrame(candles)
        
        # ‡πÉ‡∏ä‡πâ pandas-ta ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì (‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≤‡∏Å)
        df.ta.ema(length=20, append=True)
        df.ta.ema(length=50, append=True)
        df.ta.rsi(length=14, append=True)
        
        # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
        latest = df.iloc[-1]
        return {
            "ohlc": df[['open', 'high', 'low', 'close']].tail(5).to_json(orient='records'),
            "ema20": f"{latest['EMA_20']:.5f}" if 'EMA_20' in latest else "N/A",
            "ema50": f"{latest['EMA_50']:.5f}" if 'EMA_50' in latest else "N/A",
            "rsi": f"{latest['RSI_14']:.2f}" if 'RSI_14' in latest else "N/A",
        }

    def get_technical_data(self, pair):
        """
        ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        """
        if not self.api:
            return None # ‡∏´‡∏≤‡∏Å‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ None

        # ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà API ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡πÄ‡∏ä‡πà‡∏ô EUR/USD -> EURUSD)
        api_pair_name = pair.replace("/", "")
        
        # Timeframe ‡πÉ‡∏ô IQ Option ‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (H1=3600, M15=900)
        
        # 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• H1 ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
        h1_candles = self._fetch_candles(api_pair_name, 3600, 100) # ‡∏î‡∏∂‡∏á 100 ‡πÅ‡∏ó‡πà‡∏á
        h1_data = self._calculate_indicators(h1_candles)
        
        # 2. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• M15 ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
        m15_candles = self._fetch_candles(api_pair_name, 900, 100) # ‡∏î‡∏∂‡∏á 100 ‡πÅ‡∏ó‡πà‡∏á
        m15_data = self._calculate_indicators(m15_candles)

        if not h1_data or not m15_data:
            print(f"‚ùå Could not retrieve full technical data for {pair}.")
            return None
        
        # 3. ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏£‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô
        return {
            "h1_ohlc": h1_data['ohlc'],
            "h1_ema20": h1_data['ema20'],
            "h1_ema50": h1_data['ema50'],
            "h1_rsi": h1_data['rsi'],
            "m15_ohlc": m15_data['ohlc'],
            "m15_rsi": m15_data['rsi'],
        }

    def close_connection(self):
        """
        ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
        """
        if self.api:
            print("üîå Logging out and closing connection...")
            self.api.logout()