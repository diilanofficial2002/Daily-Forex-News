# get_data.py
import os
import time
import pandas as pd
import pandas_ta as ta
from iqoptionapi.stable_api import IQ_Option
from dotenv import load_dotenv

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å .env
load_dotenv()

class IQDataFetcher:
    """
    ‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ IQ Option, ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤ ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Indicators
    """
    def __init__(self):
        """
        Constructor: ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• login ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API
        """
        print("ü§ñ Initializing IQ Option Data Fetcher...")
        self.user = os.getenv("IQ_USER")
        self.password = os.getenv("IQ_PASS")
        self.api = None
        self.connect()

    def connect(self):
        """
        ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö IQ Option API ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Practice
        """
        if not self.user or not self.password:
            print("‚ùå IQ_USER or IQ_PASS not found in .env file. Cannot connect.")
            return

        print(f"üîó Connecting to IQ Option as {self.user}...")
        self.api = IQ_Option(self.user, self.password)
        check, reason = self.api.connect()

        if check:
            print("‚úÖ Connection successful!")
            # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î (Practice Account)
            # ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô "REAL"
            self.api.change_balance("PRACTICE") 
            print("üí∞ Switched to PRACTICE account.")
        else:
            print(f"‚ùå Connection failed. Reason: {reason}")
            self.api = None

    def _fetch_candles(self, pair, timeframe, count):
        """
        ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô (Candles)
        """
        if not self.api:
            return None
            
        print(f"üïØÔ∏è  Fetching {count} candles for {pair} on {timeframe}s timeframe...")
        self.api.start_candles_stream(pair, timeframe, count)
        time.sleep(3) # ‡∏£‡∏≠‡πÉ‡∏´‡πâ API ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à
        candles = self.api.get_realtime_candles(pair, timeframe)
        self.api.stop_candles_stream(pair, timeframe)
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô List of Dictionaries ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
        candle_list = []
        for timestamp in candles:
            candle_data = candles[timestamp]
            # ‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠ Key
            if 'open' in candle_data and candle_data.get('open') is not None:
                standardized_candle = {
                    'open': candle_data.get('open'),
                    'high': candle_data.get('max'),
                    'low': candle_data.get('min'),
                    'close': candle_data.get('close'),
                    'volume': candle_data.get('volume')
                }
                candle_list.append(standardized_candle)
        
        print(f"üìä Found {len(candle_list)} candles.")
        return candle_list
    def _calculate_indicators(self, candles):
        """
        ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Indicators ‡∏î‡πâ‡∏ß‡∏¢ Pandas
        """
        # ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 50 ‡πÅ‡∏ó‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö EMA50, 14 ‡πÅ‡∏ó‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RSI, ‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 26 ‡πÅ‡∏ó‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MACD (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)
        if not candles or len(candles) < 26: # ‡πÉ‡∏ä‡πâ 26 ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MACD
            print("‚ö†Ô∏è Not enough data to calculate indicators. Minimum 26 candles required for MACD.")
            return {
                "ohlc": pd.DataFrame(candles)[['open', 'high', 'low', 'close', 'volume']].tail(5).to_json(orient='records') if candles else "[]",
                "ema20": "N/A",
                "ema50": "N/A",
                "rsi": "N/A",
                "macd": "N/A",
                "macdh": "N/A",
                "macds": "N/A",
            }

        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô DataFrame ‡∏Ç‡∏≠‡∏á Pandas
        df = pd.DataFrame(candles)
        
        # ‡πÉ‡∏ä‡πâ pandas-ta ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì (‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≤‡∏Å)
        df.ta.ema(length=20, append=True)
        df.ta.ema(length=50, append=True)
        df.ta.rsi(length=14, append=True)
        df.ta.macd(append=True) # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì MACD ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (12, 26, 9)

        # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
        latest = df.iloc[-1]
        
        return {
            "ohlc": df[['open', 'high', 'low', 'close', 'volume']].tail(5).to_json(orient='records'), # ‡πÄ‡∏û‡∏¥‡πà‡∏° volume
            "ema20": f"{latest['EMA_20']:.5f}" if 'EMA_20' in latest and pd.notna(latest['EMA_20']) else "N/A",
            "ema50": f"{latest['EMA_50']:.5f}" if 'EMA_50' in latest and pd.notna(latest['EMA_50']) else "N/A",
            "rsi": f"{latest['RSI_14']:.2f}" if 'RSI_14' in latest and pd.notna(latest['RSI_14']) else "N/A",
            "macd": f"{latest['MACD_12_26_9']:.5f}" if 'MACD_12_26_9' in latest and pd.notna(latest['MACD_12_26_9']) else "N/A", # ‡πÄ‡∏û‡∏¥‡πà‡∏° MACD
            "macdh": f"{latest['MACDH_12_26_9']:.5f}" if 'MACDH_12_26_9' in latest and pd.notna(latest['MACDH_12_26_9']) else "N/A", # ‡πÄ‡∏û‡∏¥‡πà‡∏° MACD Histogram
            "macds": f"{latest['MACDS_12_26_9']:.5f}" if 'MACDS_12_26_9' in latest and pd.notna(latest['MACDS_12_26_9']) else "N/A", # ‡πÄ‡∏û‡∏¥‡πà‡∏° MACD Signal
        }

    def _calculate_pivot_points(self, high, low, close):
        """Calculates Standard Daily Pivot Points."""
        pp = (high + low + close) / 3
        r1 = (2 * pp) - low
        s1 = (2 * pp) - high
        r2 = pp + (high - low)
        s2 = pp - (high - low)
        r3 = high + 2 * (pp - low)
        s3 = low - 2 * (high - pp)
        return {
            "pp": f"{pp:.5f}", "r1": f"{r1:.5f}", "s1": f"{s1:.5f}",
            "r2": f"{r2:.5f}", "s2": f"{s2:.5f}", "r3": f"{r3:.5f}", "s3": f"{s3:.5f}"
        }

    def get_technical_data(self, pair):
        """
        ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        """
        if not self.api:
            return None # ‡∏´‡∏≤‡∏Å‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ None

        api_pair_name = pair.replace("/", "")
        
        # 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• H4 ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
        h4_candles = self._fetch_candles(api_pair_name, 14400, 100) # ‡∏î‡∏∂‡∏á 100 ‡πÅ‡∏ó‡πà‡∏á
        h4_data = self._calculate_indicators(h4_candles)
        
        # 2. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• H1 ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
        h1_candles = self._fetch_candles(api_pair_name, 3600, 100) # ‡∏î‡∏∂‡∏á 100 ‡πÅ‡∏ó‡πà‡∏á
        h1_data = self._calculate_indicators(h1_candles)

        # 3. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• M15 ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
        m15_candles = self._fetch_candles(api_pair_name, 900, 100) # ‡∏î‡∏∂‡∏á 100 ‡πÅ‡∏ó‡πà‡∏á
        m15_data = self._calculate_indicators(m15_candles)
        
        # 4. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô (D1) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ Previous Day's High/Low/Close
        #    ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡πÅ‡∏ó‡πà‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÅ‡∏ó‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        d1_candles = self._fetch_candles(api_pair_name, 86400, 2) 
        prev_day_high = "N/A"
        prev_day_low = "N/A"
        prev_day_close = "N/A"
        daily_pivots = {
            "pp": "N/A", "r1": "N/A", "s1": "N/A",
            "r2": "N/A", "s2": "N/A", "r3": "N/A", "s3": "N/A"
        }

        if d1_candles and len(d1_candles) >= 2:
            # ‡πÅ‡∏ó‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡πâ‡∏≤‡∏¢‡∏Ñ‡∏∑‡∏≠‡πÅ‡∏ó‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            prev_day_candle = d1_candles[-2] 
            prev_day_high = f"{prev_day_candle['high']:.5f}"
            prev_day_low = f"{prev_day_candle['low']:.5f}"
            prev_day_close = f"{prev_day_candle['close']:.5f}"
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Pivot Points ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            daily_pivots = self._calculate_pivot_points(
                prev_day_candle['high'], 
                prev_day_candle['low'], 
                prev_day_candle['close']
            )

        if not h1_data or not m15_data or not h4_data: # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö m5_data ‡∏î‡πâ‡∏ß‡∏¢
            print(f"‚ùå Could not retrieve full technical data for {pair}.")
            return None
        
        # 5. ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏£‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô
        return {
            "h4_ohlc": h4_data['ohlc'],
            "h4_ema20": h4_data['ema20'],
            "h4_ema50": h4_data['ema50'],
            "h4_rsi": h4_data['rsi'],
            "h4_macd": h4_data['macd'], # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
            "h4_macdh": h4_data['macdh'], # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
            "h4_macds": h4_data['macds'], # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
            "prev_day_high": prev_day_high,
            "prev_day_low": prev_day_low,
            "prev_day_close": prev_day_close,
            "daily_pivot_pp": daily_pivots["pp"],
            "daily_pivot_r1": daily_pivots["r1"],
            "daily_pivot_r2": daily_pivots["r2"],
            "daily_pivot_r3": daily_pivots["r3"],
            "daily_pivot_s1": daily_pivots["s1"],
            "daily_pivot_s2": daily_pivots["s2"],
            "daily_pivot_s3": daily_pivots["s3"],
            "m15_ohlc": m15_data['ohlc'],
            "m15_ema20": m15_data['ema20'],
            "m15_ema50": m15_data['ema50'],
            "m15_rsi": m15_data['rsi'],
            "m15_macd": m15_data['macd'], # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
            "m15_macdh": m15_data['macdh'], # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
            "m15_macds": m15_data['macds'], # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
            "h1_ohlc": h1_data['ohlc'],
            "h1_ema20": h1_data['ema20'],
            "h1_ema50": h1_data['ema50'],
            "h1_rsi": h1_data['rsi'],
            "h1_macd": h1_data['macd'], # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
            "h1_macdh": h1_data['macdh'], # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
            "h1_macds": h1_data['macds'], # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
        }

    def close_connection(self):
        """
        ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
        """
        if self.api:
            print("üîå Logging out and closing connection...")
            self.api.logout()